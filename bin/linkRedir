#!/usr/bin/perl -w

# No documentation yet except for what is in the $USAGE message
# and comments below.
#
# Uses:
#       take standard linkbag format and eliminate redirects;
#       ignores fragments too

use strict;
use POSIX;
use HTML::Entities;
use links::URLs;
use links::File;
use Getopt::Long;
use Pod::Usage;

# encoding pragmas follow any includes like "use"
use encoding 'utf8';
use open ':utf8';
binmode STDOUT, ":utf8";
binmode STDIN, ":utf8";

my $init = 0;

#  both hash tables only store URLs cleaned with StandardURL()
#  single redirect for a URL
my %redirect = ();
#  space delimited set of entries with same target
my %direct = ();

sub updateMaps() {
  my $inu = shift();
  my $outu = shift();
  my $direct_add = "";
  #  no duplicates
  if ( defined($redirect{$inu}) &&
       $redirect{$inu} ne $outu ) {
    print STDERR "Previous definition '$inu'->'" . $redirect{$inu}
      . "' for line:\n   $_\n";
    # exit(1);
  }
  #  anything redirecting to this source must also be
  #  redirected
  if ( defined($direct{$inu}) ) {
    $direct_add = $direct{$inu};
    undef($direct{$inu});
  }
  #  check for a redirect of the redirect
  if ( defined($redirect{$outu}) ) {
    #print STDERR "Redirect target '$outu' already redirected '$redirect{$outu}'\n";
    my $reoutu = $redirect{$outu};
    $redirect{$inu} = $reoutu;
    if ( $direct_add ) {
      #print STDERR "Redirect source '$inu' already redirected too '$direct_add'\n";
      foreach my $l ( split(/ /, $direct_add) ) {
	$redirect{$l} = $reoutu;
      }
      $direct_add = $inu . " " . $direct_add;
    } else {
      $direct_add = $inu;
    } 
    $direct{$reoutu} = $direct{$reoutu} . " " . $direct_add;
  } else {
    #  $outu terminates things
    $redirect{$inu} = $outu;
    if ( $direct_add ) {
      # print STDERR "Redirect source '$inu' already redirected too '$direct_add'\n";
      $direct{$outu} = $inu . " " . $direct_add;
      foreach my $l ( split(/ /, $direct_add) ) {
	$redirect{$l} = $outu;
      }
    } else {
      $direct{$outu} = $inu;
    }
  }
}


#  check options


#  check options

GetOptions(
     'man'       => sub {pod2usage(-exitstatus => 0, -verbose => 2)},
      'init'    => \$init,
      'nocleanurl' => \$links::URLs::nocleanurl,
      'nocaseurl' => \$links::URLs::nocaseurl,
      'h|help'       => sub {pod2usage(1)}
);

pod2usage(-message => "ERROR: need input file and stem")
      if ( $#ARGV != 1 );

my $file = shift();
my $stem = shift();

if ( $init ) {
  unlink("$stem.redirect");
}

#  first pass gets redirects into hash table,
#  and eliminates any paths

# set this if redirects used
my $somedir = 0;

#  first from the stored file
if ( open(I,"<$stem.redirect") ) {
  print STDERR "Initialising with redirects from $stem.redirect\n";
  while (($_=<I>) ) {
    chomp(); 
    if ( /^R ([^ ]+) ([^ ]+)$/ ) {
      &updateMaps($1,$2);
    } else {
      print STDERR "Bad line in '$stem.redirect': $_\n"; 
    } 
  } 
  close(I);
  $somedir = 1;
}

print STDERR "Scanning $file for redirects\n";
# then from the update file
open(REDIR,">>$stem.redirect") or die "Cannot open '$stem.redirect': $!";
&links::File::openzip(\*I,$file,"linkdata");
while (($_=<I>) ) {
  chomp(); 
  if ( /^R ([^ ]+) ([^ ]+)$/ ) {
    #  only deal with canonical URLs
    my $inu = &links::URLs::StandardURL($1);
    my $outu = &links::URLs::StandardURL($2);
    print REDIR "R $inu $outu\n";
    &updateMaps($inu,$outu);
    $somedir = 1;
  }
}
close(I);
close(REDIR);
if ( ! $somedir ) {
  unlink("$stem.redirect");
}

print STDERR "Processing links in $file\n";
&links::File::openzip(\*I,$file,"linkdata");
while (($_=<I>) ) {
  chomp();
  if ( /^D ([^ ]*) (.*)/ ) {
    my $notfin = 1;
    my $parent_url = &links::URLs::StandardURL($1);  
    print STDOUT "D $parent_url $2\n";
    while ( $notfin && ($_=<I>) ) {
      #  process all associated links
      chomp();
      if ( ($_ eq "EOL") || ($_ eq "EOD") ) {
	$notfin = 0;
	print STDOUT "$_\n";
      } elsif ( /^([^ ]+)\s*(.*)$/ ) {  
	my $left = $2;  
	my $link = $1;  
	my $link_clean = &links::URLs::StandardURL($link);  
	if (  $link_clean eq "" || 
	      $link_clean eq $parent_url ) {
	  #  self link
	  ;
	} elsif ( defined($redirect{$link_clean}) ) {
	  print STDOUT $redirect{$link_clean}, " $left\n";
	  # print STDERR "Replacing $link ($link_clean) by $redirect{$link_clean}\n";
	} else {
	  print STDOUT "$link_clean $left\n";
	}
      } else {
	print STDERR "Confusing link for $parent_url: $_\n";
	print STDOUT "$_\n";
      }
    }
  } elsif ( ! /^R ([^ ]+) ([^ ]+)/ ) {
    print STDOUT "$_\n";
  }
}
close(I);

exit 0;

__END__

=head1 NAME
    
linkRedir -- process out the redirects and normalise links in a link file.

=head1 SYNOPSIS

linkRedir [options] LINK-FILE STEM

Options:

  LINK-FILE           Filename for input link file usually created by XSL
  STEM                stem for output file, several extensions read and made
  --init              empty the STEM.redirect file at startup
  --nocaseurl         ignore case of URLs
  --nocleanurl        don't use built-in URL cleaning
  -h, --help          display help message and exit.
  --man               print man page and exit.

=head1 DESCRIPTION

Input file of links, link text and redirects.  Process out
the redirects and normalise links, taking two passes.
This is intended as a preprocessor for 
I<linkTables>(1), and the input format is found there.

Some configuration 
First pass reads in previously assembled
redirects from 
F<STEM.redirect> and then 
filter any more from LINK-FILE.
The second pass reads the links
from LINK-FILE and processes out the redirects.
Output processed links to STDOUT and saves all redirects in 
F<STEM.redirect>.  Both output files are appended to so
can be applied repeatedly to incrementally build up the result
files from a series of batches, though redirects read in a later
batch will not be applied to earlier batches.
Normalises output URIs using URI->canonical.
Assumes input URIs have no embedded spaces, they must be encoded.

=head1 SEE ALSO

I<links::URLs>(1), 
I<linkBags>(1), 
I<linkTables>(1),
I<URI>(3).

=head1 AUTHOR

Wray Buntine

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2005-2009 Wray Buntine

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.4 or,
at your option, any later version of Perl 5 you may have available.

=cut


